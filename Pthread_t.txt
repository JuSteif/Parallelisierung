Bibliothek für Threads in Linux
pthread.h

Ein Thread ist ein normaler Struct, welcher in "pthread.h" definiert ist.
Initalisierung wie einen gewöhnlichen Datentypen
pthread_t thread;

Erstellen eines Threads funktioniert mit der Funktion pthread_create
int pthread_create(pthread_t *restrict thread,
                   const pthread_attr_t *restrict attr,
                   void *(*start_routine)(void *),
                   void *restrict arg);

Rückgabewert: 				int
					Wenn kein Fehler aufgetreten ist, ist der RV(Rückgabewert) 0.
					Wenn es zu einem Fehler beim erstellen kommt, ist der RV ein Fehlercode
pthread_t *restrict thread:		pthread_t*
					Ein Pointer auf den Thread der gestartet werden soll
const pthread_attr_t *restrict attr:	pthread_attr_t*
					Diese Variable enthält Thread spezifische Daten(z.B. Flags, Timestems, ...)
					Wir übergeben NULL, das ist ausreichend und nutzt den default
void *(*start_routine)(void *):		void*
					Ein Pointer auf eine Funktion, die vom Thread ausgeführt werden soll
					Hier werden keine Parameter übergeben
void *restrict arg:			void*
					Die Parameter die der Funktion übergeben werden sollen

Warten auf des Ende eines Threads funktioniert mit der Funktion pthread_join
int pthread_join(pthread_t thread, 
		 void **retval);
Rückgabewert: 				int
					Wenn kein Fehler aufgetreten ist, ist der RV(Rückgabewert) 0.
					Wenn es zu einem Fehler beim erstellen kommt, ist der RV ein Fehlercode
pthread_t thread:			pthread_t
					Der Thread auf den gewartet werden soll
void **retval:				void**
					Ein pointer auf die Rückgabewerte der Funktion, die vom Thread ausgeführt wurde.

Beenden eines threads funktioniert mit der Funktion pthread_cancel
int pthread_cancel(pthread_t thread);
Rückgabewert: 				int
					Wenn kein Fehler aufgetreten ist, ist der RV(Rückgabewert) 0.
					Wenn es zu einem Fehler beim erstellen kommt, ist der RV ein Fehlercode
pthread_t thread:			pthread_t
					Der Thread der beendet werden soll
Sehr unschöne Art einen Thread zu beenden, wenn möglich sollte darauf verzichtet werden

Beispielprogramm:
Einlesen einer Zahl
Übergeben der Zahl and einen Thread
Ausgabe der Zahl innerhalb des Threads
Rückgabe der Zahl um 2 erhöh an die main-Funktion

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

int* printZahl(int* iZahl){

	printf("%d\n", *iZahl);
	int* iResult = malloc(sizeof(int));
	*iResult = *iZahl + 2;

	return iResult;
}

int main(){
	int iZahl;
	pthread_t thread;							//Deklaration eines neuen Threads
	int* iResult = malloc(sizeof(int));					//Speichervariable für RV des Threads

	scanf("%d", &iZahl);

	pthread_create(&thread, NULL, (void*)&printZahl, (void*)&iZahl);	//Den Thread mit der Funktion pintZahl starten und iZahl als Eingabeparameter übergeben

	pthread_join(thread, (void**)&iResult);					//Auf das Ende des Threads warten und den RV in iResult speichern

	printf("%d\n", *iResult);
	free(iResult);

	return 0;
}